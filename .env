function timeitout
{
    local DELAY=5
    local CHILD_PARAM_PRESENT=false

    # function arguments
    local argv=()       # store arguments in array
    local argc=""       # arguments count   

    # command will depend on '-t' parameter presence
    local command=""

    # detect input from terminal or file
    if [[ -t 0 ]];then  # terminal
        argv=("${@}")
        argc="${#}"
    else                # stdin - not implemented
        echo "stdin - not implemented"
        return 0
        # argv="$(cat -)"
        # argv=(${argv})
        # unset argv[0]   # remove 'timeitout' to get arguments only
        # argc="${#argv[*]}"
    fi

    # build proper command
    # depending on parameter '-t' and its arguments presence
    if [[ "${argv[0]}" == "-t" && "${argc}" -gt 1 ]]; then
        DELAY=${argv[1]}    # overwrite delay
        # use existing command for applying delay - 'timeout'
        command="timeout ${DELAY}"
        if [[ "${argc}" -gt 2 ]];then # child present
            command+=" ${argv[2]}"
            if [[ "${argc}" -gt 3 ]];then # child parameter present
                command+=" ${argv[*]:3}"
                CHILD_PARAM_PRESENT=true
            fi
        fi
    elif [[ "${argc}" -gt 0 ]];then # child presence
        command="timeout ${DELAY} ${argv[0]}"
        if [[ "${argc}" -gt 1 ]];then # child parameter present
            command+=" ${argv[*]:1}"
            CHILD_PARAM_PRESENT=true
        fi
    fi

    local STDOUT_FILE="out.log"
    local STDERR_FILE="err.log"
    
    if [[ ${CHILD_PARAM_PRESENT} = true ]];then # child parameter present
        # Print out child's execution time to stderr
        (time ${command}) 2> ${STDERR_FILE}
    else                                        # child parameter not present
        # If no child parameter specified, copy stdin to stdout instead of executing program. Still keep timeout.
        # redirected stderr to stdout
        (time ${command}) > ${STDOUT_FILE} 2>&1
        sleep ${DELAY}
    fi

}

echo "Script updated."
